#!%PERL% -w

# $Id: env.pl.in,v 1.2.2.10 2015-01-25 03:09:18 opengl2772 Exp $
# Copyright (C) 2006-2015 Tadamasa Teranishi
#               2006-2015 Namazu Project All rights reserved.
#     This is free software with ABSOLUTELY NO WARRANTY.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either versions 2, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA
#
#  This file must be encoded in EUC-JP encoding
#
#

#
# print environment
#

use strict;
use English;
use Config;

eval 'require File::MMagic;';
eval 'require NKF;';
eval 'require Text::Kakasi;';
eval 'require Text::ChaSen;';
eval 'require MeCab;';

# for filter
eval 'use File::Basename;';
eval 'use Archive::Zip;';
eval 'use Archive::Tar;';
eval 'use MIME::Base64;';
eval 'use MIME::QuotedPrint;';
eval 'use MP3::Info;';
eval 'use OLE::Storage_Lite;';
eval 'use OLE::Storage_Lite::PPS;';
eval 'use OLE::Storage_Lite::PPS::Root;';
eval 'use OLE::Storage_Lite::PPS::File;';
eval 'use OLE::Storage_Lite::PPS::Dir;';
eval 'use IO::Scalar;';
eval 'use IO::String;';

require Cwd;
require 'pltests.pl';

use constant FLAG_MASK      => 0x01;
use constant FLAG_CHECKSTR  => 0x02;
use constant FLAG_CHECKPATH => 0x06;


my $cwd = Cwd::cwd();
my $LOG = "$cwd/test-log";
my $stat = 0;

sub env($)
{
    my ($type) = @_;

    if (defined $ENV{$type}) {
        $ENV{$type};
    } else {
        'undef';
    }
}

sub maskenv($)
{
    my ($type) = @_;

    my $mask = env($type);
    
    return $mask if ($mask eq 'undef');

    $mask =~ s/[0-9A-Z]/\*/gi;
    $mask;
}

sub printenv($$)
{
    my ($env, $flag) = @_;
    my $flagCheckPath = 0;
    my $flagCheckStr = 0;
    my $flagMask = 0;
    my $value;
    my $stat = 0;


    if (defined($flag)) {
        $flagCheckPath = 1 if ($flag & FLAG_CHECKPATH);
        $flagCheckStr = 1 if ($flag & FLAG_CHECKSTR);
        $flagMask = 1 if ($flag & FLAG_MASK);
    }

    if ($flagCheckPath == 1) {
        $stat = 1 if (env($env) =~ m/[^0-9A-Z\-\/\\:~\.]/gi);
    } elsif ($flagCheckStr == 1) {
        $stat = 1 if (env($env) =~ m/[^0-9A-Z\-]/gi);
    }

    if ($flagMask == 1) {
        $value = maskenv($env);
    } else {
        $value = env($env);
    }
   
    pltests::putline($LOG,
        sprintf("%-21s: %s%s", $env, $value,
        $stat == 0 ? '' : ' *** FAIL ***')
    );

    return $stat;
}

pltests::putline($LOG, "  *** starting $0");
pltests::putline($LOG, sprintf("OSNAME               : %s", $English::OSNAME));
pltests::putline($LOG, sprintf("osvers               : %s", $Config{'osvers'}));
pltests::putline($LOG, sprintf("archname             : %s", $Config{'archname'}));
pltests::putline($LOG, sprintf("Perl                 : %f", $English::PERL_VERSION));

my $ver;
eval '$ver = $File::MMagic::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("File::MMagic         : $ver"));
eval '$ver = $NKF::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("NKF module           : $ver"));
eval '$ver = $Text::Kakasi::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("Text::Kakasi         : $ver"));
eval '$ver = $Text::ChaSen::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("Text::ChaSen         : $ver"));
eval '$ver = $MeCab::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("MeCab module         : $ver"));

eval '$ver = $File::Basename::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("File::Basename       : $ver"));
eval '$ver = $Archive::Zip::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("Archive::Zip         : $ver"));
eval '$ver = $Archive::Tar::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("Archive::Tar         : $ver"));
eval '$ver = $MIME::Base64::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("MIME::Base64         : $ver"));
eval '$ver = $MIME::QuotedPrint::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("MIME::QuotedPrint    : $ver"));
eval '$ver = $MP3::Info::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("MP3::Info            : $ver"));
eval '$ver = $OLE::Storage_Lite::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("OLE::Storage_Lite            : $ver"));
eval '$ver = $OLE::Storage_Lite::PPS::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("OLE::Storage_Lite::PPS       : $ver"));
eval '$ver = $OLE::Storage_Lite::PPS::Root::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("OLE::Storage_Lite::PPS::Root : $ver"));
eval '$ver = $OLE::Storage_Lite::PPS::File::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("OLE::Storage_Lite::PPS::File : $ver"));
eval '$ver = $OLE::Storage_Lite::PPS::Dir::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("OLE::Storage_Lite::PPS::Dir  : $ver"));
eval '$ver = $IO::Scalar::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("IO::Scalar           : $ver"));
eval '$ver = $IO::String::VERSION;' or $ver = 'not installed';
pltests::putline($LOG, sprintf("IO::String           : $ver"));

$stat += printenv('LANGUAGE', 0);
$stat += printenv('LC_ALL', 0);
$stat += printenv('LC_MESSAGES', 0);
$stat += printenv('LC_CTYPE', 0);
$stat += printenv('LC_TIME', 0);
$stat += printenv('LANG', 0);

$stat += printenv('PATH', FLAG_MASK);
$stat += printenv('PATHEXT', 0);
$stat += printenv('HOME', FLAG_MASK);
$stat += printenv('HOMEDRIVE', 0);
$stat += printenv('HOMEPATH', FLAG_MASK);

$stat += printenv('TZ', 0);
$stat += printenv('SHELL', 0);
$stat += printenv('ComSpec', 0);
$stat += printenv('SystemDrive', 0);
$stat += printenv('TEMP', FLAG_CHECKSTR | FLAG_CHECKPATH);
$stat += printenv('TMP', FLAG_CHECKSTR | FLAG_CHECKPATH);
$stat += printenv('USER', FLAG_MASK | FLAG_CHECKSTR);
$stat += printenv('USERDOMAIN', FLAG_MASK | FLAG_CHECKSTR);
$stat += printenv('USERNAME', FLAG_MASK);
$stat += printenv('USERPROFILE', FLAG_MASK);
$stat += printenv('COMPUTERNAME', FLAG_MASK | FLAG_CHECKSTR);
$stat += printenv('LOGONSERVER', FLAG_MASK);
$stat += printenv('OS', 0);
$stat += printenv('PROCESSOR_IDENTIFIER', 0);

$stat += printenv('NAMAZURC', 0);
$stat += printenv('MKNMZRC', 0);
$stat += printenv('NAMAZULOCALEDIR', 0);
$stat += printenv('KANWADICTPATH', 0);
$stat += printenv('ITAIJIDICTPATH', 0);
$stat += printenv('MECABRC', 0);
$stat += printenv('pkgdatadir', 0);
$stat += printenv('HTTP_proxy', 0);
$stat += printenv('HTTP_proxy_user', FLAG_MASK);
$stat += printenv('HTTP_proxy_pass', FLAG_MASK);

exit $stat;
